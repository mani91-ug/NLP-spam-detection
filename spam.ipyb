{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string #will be used to get array of different puntuation marks\n",
    "import numpy as np #for linear algebra\n",
    "from spacy.lang.en import English #class with english tokenizer\n",
    "from spacy.lang.en.stop_words import STOP_WORDS #list of words not so useful in text classification\n",
    "import pandas as pd #for data wrangling \n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer #countvectorizer creates matrices of \n",
    "#token counts and tfidf vectorizer penalizes more frequent words, giving less common words more weighting\n",
    "from sklearn.base import TransformerMixin #used for custom transformers in pipelines\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import jaccard_similarity_score, f1_score #scoring criteria\n",
    "from sklearn.model_selection import cross_validate, GridSearchCV \n",
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier #voting classifier allows the combining of two \n",
    "#models to get majority-voting ensemble classifier\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn import svm\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from imblearn.pipeline import Pipeline #imblearn pipeline deals withover/undersampling correctly\n",
    "from imblearn.over_sampling import RandomOverSampler, SMOTE, ADASYN #different oversampling techniques\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "matplotlib.rcParams.update({'font.size': 12})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>v1</th>\n",
       "      <th>v2</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spam</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ham</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     v1                                                 v2 Unnamed: 2  \\\n",
       "0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
       "1   ham                      Ok lar... Joking wif u oni...        NaN   \n",
       "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
       "3   ham  U dun say so early hor... U c already then say...        NaN   \n",
       "4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
       "\n",
       "  Unnamed: 3 Unnamed: 4  \n",
       "0        NaN        NaN  \n",
       "1        NaN        NaN  \n",
       "2        NaN        NaN  \n",
       "3        NaN        NaN  \n",
       "4        NaN        NaN  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"spam.csv\", encoding = \"latin1\") #default encoding doesn't work here so changed it to \"latin1\"\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ham (0) or Spam(1)?</th>\n",
       "      <th>SMS text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Ham (0) or Spam(1)?                                           SMS text\n",
       "0                    0  Go until jurong point, crazy.. Available only ...\n",
       "1                    0                      Ok lar... Joking wif u oni...\n",
       "2                    1  Free entry in 2 a wkly comp to win FA Cup fina...\n",
       "3                    0  U dun say so early hor... U c already then say...\n",
       "4                    0  Nah I don't think he goes to usf, he lives aro..."
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#clean up dataset, covnerting spam to 1 and ham to 0, renaming columns, and removing unnamed columns\n",
    "\n",
    "df = df.iloc[:, 0:2]\n",
    "df.columns = ['Ham (0) or Spam(1)?', 'SMS text'] #changes column names\n",
    "df.replace(to_replace = ['ham', 'spam'], value = [0,1], inplace = True) #replaces 'ham' of 'spam' with numbers\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5572, 2)\n",
      "0    4825\n",
      "1     747\n",
      "Name: Ham (0) or Spam(1)?, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#df = df.dropna()\n",
    "print(df.shape)\n",
    "print(df.iloc[:, 0].value_counts()) #there is an imbalance of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n",
      "{'seeming', 'five', 'herein', 'although', 'noone', 'top', 'hereby', 'become', '‘m', 'have', 'go', 'to', 'upon', 'two', 'one', 'via', 'three', 'is', 'toward', 'us', 'yourself', 'latter', 'besides', 'former', 'take', 'nobody', 'put', 'regarding', 'four', \"'d\", 'either', 'cannot', 'whole', 'moreover', 'too', 'your', 'above', 'who', 'without', 'only', 'over', 'ourselves', 'thus', 'mostly', 'several', 'so', 'beforehand', 'front', 'hence', 'about', 'those', 'but', 'are', 'was', 'down', 'see', 'made', 'from', 'keep', 'six', \"'ll\", 'our', 'first', 'his', 'seems', 'whither', 'n‘t', 'be', 'together', 'same', 'no', 'them', 'full', 'bottom', 'if', 'otherwise', 'twelve', 'such', 'once', '‘ve', 'enough', 'forty', 'i', 'these', 'with', '‘ll', 'also', 'elsewhere', 'whereupon', 'becoming', 'me', 'move', 'it', 'others', \"'re\", 'out', 'or', 'even', 'most', 'did', 'almost', 'beside', 'below', 'least', 'between', 'anyway', 'still', 'their', 'thereafter', 'though', 'wherever', \"'m\", 'say', 'behind', 'while', '‘re', 'than', 'none', 'someone', 'something', 'well', 'my', 'nor', 'every', 'seemed', 'throughout', 'eleven', 'this', 'were', '’ll', 'yourselves', 'ten', 'sixty', 'show', 'can', 'other', 'her', 'nine', 'through', '‘d', 'among', 'because', 'ours', 'could', 're', 'therefore', 'another', 'thru', 'twenty', 'both', 'always', 'however', 'few', 'whence', 'everything', 'anyhow', 'beyond', 'more', 'part', 'serious', 'unless', '’d', 'then', 'on', 'thereby', 'whether', 'perhaps', 'in', \"'s\", 'n’t', 'just', 'what', 'by', 'onto', 'next', 'which', 'hundred', 'becomes', 'own', 'per', 'yours', 'how', 'fifty', 'nevertheless', '‘s', 'call', 'anywhere', 'for', 'whose', 'thence', 'him', 'nowhere', 'fifteen', 'sometimes', 'he', 'at', 'give', 'all', 'everywhere', 'last', 'quite', 'as', 'many', \"n't\", 'whoever', 'not', 'else', 'please', 'except', 'whatever', 'any', 'using', 'latterly', 'against', 'therein', 'towards', 'somehow', 'whereas', 'much', 'why', 'whenever', 'often', 'used', 'around', 'hereupon', 'we', 'back', 'anyone', 'themselves', 'does', 'mine', 'thereupon', 'various', 'there', 'across', 'that', 'doing', '’re', 'ever', 'whom', 'when', 'whereafter', 'you', 'everyone', 'had', 'side', 'namely', 'under', 'ca', 'formerly', 'third', 'done', '’s', 'herself', 'off', 'until', 'became', 'whereby', 'name', 'after', '’ve', '’m', 'get', 'nothing', 'indeed', 'seem', 'has', 'must', 'should', 'some', 'will', 'sometime', 'up', 'within', 'been', 'hers', 'alone', 'they', 'would', \"'ve\", 'and', 'afterwards', 'the', 'itself', 'a', 'do', 'being', 'where', 'along', 'further', 'himself', 'into', 'yet', 'anything', 'meanwhile', 'might', 'rather', 'wherein', 'of', 'less', 'she', 'since', 'make', 'eight', 'again', 'very', 'empty', 'amount', 'myself', 'already', 'due', 'each', 'amongst', 'may', 'somewhere', 'its', 'am', 'an', 'here', 'hereafter', 'neither', 'now', 'during', 'really', 'before', 'never'}\n"
     ]
    }
   ],
   "source": [
    "punctuation = string.punctuation\n",
    "stopwords = STOP_WORDS\n",
    "print(punctuation)\n",
    "print(STOP_WORDS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "nlp = English() #load default english pipeline\n",
    "\n",
    "#create token modifier\n",
    "\n",
    "def spacy_tokenizer(sentence):\n",
    "    my_tokens = nlp(sentence) \n",
    "    #token.lemma_ gives lemmatization of token, lower() converts it to lower case, strip() returns new string\n",
    "    #with leading and trailing white spaces removed, \"-PRON-\" is the lemmatization spacy gives to pronouns\n",
    "    my_tokens = [token.lemma_.lower().strip() if token.lemma != \"-PRON-\"\n",
    "                 else token.lower_ for token in my_tokens]\n",
    "    #remove stopwords\n",
    "    my_tokens = [token for token in my_tokens if token not in stopwords and token not in punctuation]\n",
    "    return my_tokens\n",
    "\n",
    "#create custom transformer for scikit-learn pipeline\n",
    "class predictors(TransformerMixin): #inherits from Transformermixin class\n",
    "    def transform(self, X, **transform_params): #**are optional params\n",
    "        return [clean_text(text) for text in X]\n",
    "    \n",
    "    def fit(self, X, y = None, **fit_params):\n",
    "        return self\n",
    "    \n",
    "#function to remove leading and trailing white spaces in text and lower the case\n",
    "def clean_text(text):\n",
    "    return text.strip().lower()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create matrix of work frequency, ngram_range decides minimum and maximum word combinations to use\n",
    "bow_vector = CountVectorizer(tokenizer = spacy_tokenizer, ngram_range = (1,1))\n",
    "#tfidf penalizes more common words to give less common words more weight\n",
    "tfidf_vector = TfidfVectorizer(tokenizer = spacy_tokenizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#lets look at the most common words in ham vs spam\n",
    "\n",
    "df0 = df[df['Ham (0) or Spam(1)?'] == 0]\n",
    "y0 = df0[['Ham (0) or Spam(1)?']]\n",
    "X0 = df0['SMS text']\n",
    "\n",
    "df1 = df[df['Ham (0) or Spam(1)?'] == 1]\n",
    "y1 = df1[['Ham (0) or Spam(1)?']]\n",
    "X1 = df1['SMS text']\n",
    "\n",
    "def word_frequency(X, y): #function to obtain word frequency in different input data for top 10 words\n",
    "   frequency = predictors().fit_transform(X) #clean text\n",
    "   frequency = bow_vector.fit_transform(frequency) #create word frequency matrix\n",
    "   frequency_dict = dict(zip(bow_vector.get_feature_names(), list(np.sum(frequency.toarray(), axis = 1)))) #convert to \n",
    "   #dictionary\n",
    "   frequency_list = [(k, frequency_dict[k]) for k in sorted(frequency_dict, key = frequency_dict.get, reverse = True)]\n",
    "   #sort words by frequency\n",
    "   return [i[0] for i in frequency_list][0:10], [i[1] for i in frequency_list][0:10]\n",
    "\n",
    "plot_x0, plot_y0 = word_frequency(X0,y0)\n",
    "plot_x1, plot_y1 = word_frequency(X1,y1)\n",
    "\n",
    "fig, ax = plt.subplots(nrows = 2, ncols = 1, figsize = (20, 10))\n",
    "ax[0].bar(plot_x0, plot_y0)\n",
    "ax[1].bar(plot_x1, plot_y1, color = 'r')\n",
    "ax[0].set_title('Ham')\n",
    "ax[1].set_title('Spam')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The most common words are different in all cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost\n",
      "jaccard index: [0.71523179 0.6516129  0.68666667 0.59333333 0.63157895] 0.6556847277347394\n",
      "f1-value: [0.90608025 0.88085344 0.89521589 0.8570506  0.87295536] 0.8824311071502882\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/svm/base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM\n",
      "jaccard index: [0. 0. 0. 0. 0.] 0.0\n",
      "f1-value: [0.46394231 0.46394231 0.46416546 0.46416546 0.46416546] 0.4640762015762016\n",
      "KNN\n",
      "jaccard index: [0.32       0.34666667 0.30872483 0.29530201 0.33557047] 0.3212527964205817\n",
      "f1-value: [0.71732582 0.73326401 0.71056541 0.70218075 0.72686003] 0.718039202852687\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LR\n",
      "jaccard index: [0.85333333 0.85430464 0.79470199 0.80536913 0.85430464] 0.8324027438256515\n",
      "f1-value: [0.95479641 0.95507326 0.93488414 0.93869492 0.95506747] 0.9477032395802855\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForest\n",
      "jaccard index: [0.80794702 0.69333333 0.73154362 0.68666667 0.7218543 ] 0.728268989732877\n",
      "f1-value: [0.93947715 0.89780914 0.91232834 0.89521589 0.90856004] 0.9106781106930135\n"
     ]
    }
   ],
   "source": [
    "#test all models without fine tuning\n",
    "\n",
    "model_names = ['XGBoost', 'SVM', 'KNN', 'LR', 'RandomForest']\n",
    "models = [XGBClassifier(random_state = 0), svm.SVC(random_state = 0), KNeighborsClassifier(), \n",
    "          LogisticRegression(random_state = 0), RandomForestClassifier(random_state = 0)]\n",
    "\n",
    "for i, j in enumerate(models):\n",
    "   my_pipeline = Pipeline([(\"cleaner\", predictors()),\n",
    "                        (\"vectorizer\", bow_vector), #with default settings, bow_vector worked better than tfidf_vector\n",
    "                        #(\"sampler\", sampler), #resampling didn't help so much\n",
    "                        (\"model\", models[i])])\n",
    "   scores = cross_validate(my_pipeline, X, y, cv = 5, scoring = ('jaccard','f1_macro'))\n",
    "   print(model_names[i])\n",
    "   print('jaccard index:', scores['test_jaccard'], np.mean(np.array(scores['test_jaccard'])))\n",
    "   print('f1-value:', scores['test_f1_macro'], np.mean(np.array(scores['test_f1_macro']))) #macro averages across\n",
    "#both classes so better addresses the class imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'model__learning_rate': 0.2, 'model__n_estimators': 400}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'model__C': 10, 'model__gamma': 0.01}\n",
      "{'model__n_neighbors': 1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'model__C': 10, 'model__penalty': 'l2', 'model__solver': 'liblinear'}\n",
      "{'model__max_features': 5, 'model__n_estimators': 750}\n"
     ]
    }
   ],
   "source": [
    "#Lets try and improve our algorithms using grid search\n",
    "\n",
    "def model_param_selection(X, y, nfolds, name):\n",
    "    \n",
    "    if name == 'XGBoost':\n",
    "        estimators = [100, 200, 400, 750, 1000] #number of trees\n",
    "        learning = [0.01, 0.05, 0.1, 0.2, 0.3] #learning rate\n",
    "        param_grid = {'model__n_estimators': estimators, 'model__learning_rate' : learning}\n",
    "    \n",
    "    elif name == 'SVM':\n",
    "        Cs = [0.001, 0.01, 0.1, 1, 10]\n",
    "        gammas = [0.001, 0.01, 0.1, 1, 10]\n",
    "        param_grid = {'model__C': Cs, 'model__gamma' : gammas}\n",
    "    \n",
    "    elif name == 'KNN':\n",
    "        neighbors = [1, 2, 3, 4, 5, 6 ,7, 8, 9, 10]\n",
    "        param_grid = {'model__n_neighbors': neighbors}\n",
    "    \n",
    "    elif name == 'LR':\n",
    "        Cs = [0.001, 0.01, 0.1, 1, 10] #regularization parameter\n",
    "        ps = ['l1', 'l2'] #penalty\n",
    "        solvers = ['liblinear']\n",
    "        param_grid = {'model__C': Cs, 'model__penalty': ps, 'model__solver': solvers}\n",
    "\n",
    "    elif name == 'RandomForest':\n",
    "        estimators = [100, 200, 400, 750, 1000] #number of trees\n",
    "        features = [1, 2, 3, 4, 5] #max number of features to check before split\n",
    "        param_grid = {'model__n_estimators': estimators, 'model__max_features' : features}\n",
    "    \n",
    "    grid_search = GridSearchCV(my_pipeline, param_grid, cv = nfolds, scoring = 'f1_macro')\n",
    "    grid_search.fit(X, y)\n",
    "    return grid_search.best_params_\n",
    "\n",
    "for i, j in enumerate(models):\n",
    "    my_pipeline = Pipeline([(\"cleaner\", predictors()),\n",
    "                        (\"vectorizer\", bow_vector),\n",
    "                        #(\"sampler\", sampler), #resampling didn't help so much\n",
    "                        (\"model\", models[i])])\n",
    "    print(model_param_selection(X, y, 5, model_names[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost\n",
      "jaccard index: [0.83116883 0.79617834 0.77483444 0.76821192 0.79113924] 0.7923065546480197\n",
      "f1-value: [0.9472272  0.93504886 0.92789369 0.92553291 0.93321282] 0.9337830969540877\n",
      "SVM\n",
      "jaccard index: [0.86666667 0.85430464 0.81456954 0.82666667 0.85333333] 0.8431081677704194\n",
      "f1-value: [0.95915751 0.95507326 0.94174032 0.94590173 0.95479063] 0.9513326885318623\n",
      "KNN\n",
      "jaccard index: [0.61333333 0.58       0.57718121 0.60402685 0.59060403] 0.5930290827740492\n",
      "f1-value: [0.86557776 0.85128329 0.85015213 0.86173746 0.85598908] 0.8569479453898868\n",
      "LR\n",
      "jaccard index: [0.86       0.85430464 0.82236842 0.81333333 0.86092715] 0.842186708493087\n",
      "f1-value: [0.95698374 0.95507326 0.94434401 0.94137195 0.95724054] 0.9510026985616612\n",
      "RandomForest\n",
      "jaccard index: [0.75333333 0.67333333 0.69798658 0.65771812 0.67785235] 0.6920447427293065\n",
      "f1-value: [0.92025261 0.89001045 0.89967479 0.88388885 0.89186653] 0.8971386449620955\n"
     ]
    }
   ],
   "source": [
    "model_names = ['XGBoost', 'SVM', 'KNN', 'LR', 'RandomForest']\n",
    "models = [XGBClassifier(random_state = 0, learning_rate = 0.2, n_estimators = 400), \n",
    "          svm.SVC(random_state = 0, C = 10, gamma = 0.01), KNeighborsClassifier(n_neighbors = 1), \n",
    "          LogisticRegression(random_state = 0, C = 10, penalty = 'l2', solver = 'liblinear'), \n",
    "          RandomForestClassifier(random_state = 0, max_features = 5, n_estimators = 750)]\n",
    "\n",
    "for i, j in enumerate(models):\n",
    "   my_pipeline = Pipeline([(\"cleaner\", predictors()),\n",
    "                        (\"vectorizer\", bow_vector),\n",
    "                        #(\"sampler\", sampler), #resampling didn't help so much\n",
    "                        (\"model\", models[i])])\n",
    "   scores = cross_validate(my_pipeline, X, y, cv = 5, scoring = ('jaccard','f1_macro'))\n",
    "   print(model_names[i])\n",
    "   print('jaccard index:', scores['test_jaccard'], np.mean(np.array(scores['test_jaccard'])))\n",
    "   print('f1-value:', scores['test_f1_macro'], np.mean(np.array(scores['test_f1_macro'])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "jaccard index: [0.86       0.86092715 0.82781457 0.81879195 0.87248322] 0.8480033779279079\n",
      "f1-value: [0.95698374 0.95724607 0.94623871 0.94328619 0.96107553] 0.9529660477581693\n"
     ]
    }
   ],
   "source": [
    "#So XGBoost, SVM and LR perform the best. What if we now combine them into an ensemble?\n",
    "\n",
    "my_pipeline = Pipeline([(\"cleaner\", predictors()),\n",
    "                        (\"vectorizer\", bow_vector),\n",
    "                        #(\"sampler\", sampler), #resampling didn't help so much\n",
    "                        (\"model\", VotingClassifier(estimators=[(\"svm\",svm.SVC(random_state = 0, C = 10, gamma = 0.01)), \n",
    "                                                               (\"LR\", LogisticRegression(random_state = 0, C = 10, penalty = 'l2', solver = 'liblinear')),\n",
    "                                                               (\"XGBoost\", XGBClassifier(random_state = 0, learning_rate = 0.2, n_estimators = 400))]))])\n",
    "\n",
    "scores = cross_validate(my_pipeline, X, y, cv = 5, scoring = ('jaccard','f1_macro'))\n",
    "print('jaccard index:', scores['test_jaccard'], np.mean(np.array(scores['test_jaccard'])))\n",
    "print('f1-value:', scores['test_f1_macro'], np.mean(np.array(scores['test_f1_macro'])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#So ensembling results in a very slight improvement"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
